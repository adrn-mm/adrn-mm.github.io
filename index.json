[{"content":"Please wait until the dashboard below is loaded.\nYou can view the full version of this dashboard in this link.\n","permalink":"http://adrian-maulana.com/visualizations/traffic-west-java/","summary":"This analytics dashboard shows the proportion of traffic alerts in the city and street of West Java. The local government can use the dashboard to monitor and get insight into their area\u0026rsquo;s traffic condition.","title":"Dashboard Traffic Alert in West Java"},{"content":"Who is Data Engineer? Data engineer is someone who builds a data-driven system so that data can be easily utilized by a company. We need data engineers because the data is scattered in many places, still raw, and too big. Data engineers are responsible for collecting, processing, and storing data so that it can be used by data scientists and analysts. The tasks of data engineer: Designing and monitoring the architecture of Data Platform and Pipeline Integrating data from multiple sources into a single source (Data Ingestion) Implementing Data Governance. Data governance is the process of managing and controlling data within a company (Data Quality, Data Security \u0026amp; Privacy, Data Access Management). Implementing Data Lifecycle Management Data Collection \u0026amp; Processing Data Storage Data Use \u0026amp; Analysis Data Deletion Data Pipeline Pipeline Components Sources Staging/Landing Data Warehouse Data Mart ETL ELT Advantages: Flexibility data formats Tranformation as needed Speed of Loading Disadvantages: Not suitable for non-cloud users Sensitive data may not comply with regulation Lower speed of analysis Data Ingestion Data ingestion is a process of transporting data from one or more sources to a target site. Stream Batch Lambda Architecture OLTP vs. OLAP Online Transaction Processing Online Analytical Processing Data Lake, Data Warehouse, \u0026amp; Data Mart Data Lake focus is on storing raw and unstructured data from various sources in a storage location, in unstructured or semi-structured formats like files, images, or streaming data, at a low cost, and providing fast access to the data. Data Warehouse focus is on creating a centralized storage location for data taken from various sources and organized in a way that can be used for analysis. Data in the data warehouse is transformed into a structured format and arranged in a star or snowflake schema, with the aim of supporting decision-making and business analysis. Data marts are a subset of the data warehouse that focus on a specific business area, such as sales or finance. They are taken from the data warehouse and presented in a format suitable for business purposes. Data marts are used to meet the specific needs of departments or for specific business analysis needs. Relational and Non-Relational Databases Relational databases consist of tables with rows and columns, which are related to each other using primary and foreign keys. The data is organized using a schema, and SQL (Structured Query Language) is used to interact with the database. Relational databases are suitable for applications that require high data integrity and complex transactions, and tools like MySQL, MS SQL Server, and PostgreSQL are commonly used. Non-relational databases, also known as NoSQL, use a more flexible data model, such as document, graph, or key-value store, and are not organized in a fixed schema. They are suitable for applications that require horizontal scalability and the ability to manage unstructured data. Tools like MongoDB, Cassandra, and Redis are commonly used for NoSQL databases. ","permalink":"http://adrian-maulana.com/blogs/data-engineering-101/","summary":"An introduction and key concepts to data engineering. It\u0026rsquo;s a concise overview for anyone seeking a basic understanding of data engineering.","title":"Data Engineering 101"},{"content":"Please wait until the dashboard below is loaded.\nYou can view the full version of this dashboard in this link.\n","permalink":"http://adrian-maulana.com/visualizations/covid-indonesia/","summary":"This dashboard displays the development of COVID-19 cases across all provinces in Indonesia.","title":"COVID-19 Indonesia Dashboard"},{"content":"Getting Started to Data Modelling Data models provide insights into the major data subjects, attributes of the data, relationships between the data, and the business rules for the data. These are some terminologies in data modeling: Entity: A thing or concept in the real world that is represented in the database, such as a person, place, thing, or event. Attributes: Characteristics or properties that describe an entity, such as name, age, address, or date. Relationship: An association between two or more entities, which is used to represent how they are related to each other in the database. Types of Data Models These are the types of data modeling: Conceptual Data Model: Describes what the system contains in terms of entities, attributes, and relationships, without including implementation details. It provides a high-level view of the data requirements of the system. Logical Data Model: Describes how the system should be implemented, in terms of the data structures, constraints, and rules. It defines the logical relationships between entities, attributes, and relationships, and is independent of any specific database management system (DBMS). Physical Data Model: Describes how the system will be implemented using a specific DBMS system, including details such as data types, indexing, partitioning, and storage. It defines the physical storage structures and access methods for the database. Cardinality Cardinality refers to the number of relationships between two entities, and is often expressed using the minimum and maximum values. The types of cardinality relationships are: One-to-One (1:1): Each entity in the relationship is related to exactly one other entity. One-to-Many (1:N): One entity in the relationship is related to many instances of the other entity, but the reverse is not true. Many-to-Many (M:N): Each instance of each entity can be related to many instances of the other entity. Crow\u0026rsquo;s foot notation is a visual representation used in data modeling to represent cardinality relationships between entities. It uses various symbols such as lines, diamonds, and circles to represent the types of relationships and the cardinality constraints. Normalization \u0026amp; Denormalization Normalization\nA process that involves breaking down complex tables into smaller and more structured tables, following a set of rules or normal forms, such as 1NF, 2NF, and 3NF, to reduce data redundancy and improve data integrity. It can improve query performance, prevent data loss, and increase data storage efficiency, making it suitable for complex database designs that require high data integrity and allow for flexible and efficient data management. Denormalization\nA process that involves combining multiple tables or entities into one larger table or entity, eliminating relationships or connections between tables to improve query performance and simplify database design. Although it makes data reading easier for applications that require fast and easy data access, it can cause data duplication and may be difficult to maintain data integrity if there are changes to the duplicated data. As a result, it is suitable for databases with large volumes of data. Dimensional Modelling Dimensional modeling is a data warehouse design technique that organizes data into a structure that is easy to understand and efficient for data analysis. Fact and dimension are the two key concepts in dimensional modeling. Fact refers to quantitative or numerical data that can be measured, while dimension refers to the categories or attributes used to group and filter data (context). The two data schema models used in dimensional modeling are the star schema and the snowflake schema. The star schema is a simple design with one fact table and multiple dimension tables, while the snowflake schema is a more complex design that allows for more detailed analysis. Database keys are used to ensure data integrity. Primary keys can be natural or surrogate, while foreign keys are used to create relationships between tables. Policies for historical data include overwrite, maintaining unlimited history, or maintaining limited history, depending on the specific needs of the organization. ","permalink":"http://adrian-maulana.com/blogs/data-modelling/","summary":"Data modeling is an essential component in designing efficient and effective databases. So, let\u0026rsquo;s dive in and explore the fascinating world of data modeling!","title":"Data Modelling"},{"content":"Introduction Whether it is solving a complex math problem, dealing with a difficult situation in our personal lives or at work, or making critical decisions, having effective problem-solving skills is crucial. One approach to problem solving that has been proven to be effective is using mathematical thinking, as described in the book \u0026ldquo;How to Solve It: A New Aspect of Mathematical Method\u0026rdquo; by George Pólya.\n\u0026ldquo;Mathematical thinking is a systematic approach to problem solving that involves breaking down complex problems into simpler, more manageable parts, and applying logical reasoning and mathematical concepts to find solutions.\u0026rdquo;\nAccording to Pólya, there are four steps to problem solving using mathematical thinking:\nUnderstanding The Problem Devising a Plan Carrying Out The Plan Evaluating The Solution. Understanding The Problem Understanding The Problem The first step in problem solving using mathematical thinking is to understand the problem. This involves:\nReading the problem carefully Identifying what information is given and what is being asked Identifying any constraints or assumptions that need to be considered. Suppose you are given the following problem or study case:\nSuppose you are planning a road trip and need to calculate the total cost of gas for the trip. You know that your car has an average gas mileage of 25 miles per gallon, and you will be driving a total distance of 500 miles. The price of gas is $3.00 per gallon. How much will you need to spend on gas for the entire trip?\nTo understand this problem, we need to identify what information is given and what is being asked. From the problem statement, we know:\nWe are planning a road trip, and we have information about the car\u0026rsquo;s gas mileage, the total distance to be traveled, and the price of gas. We are asked to find the total cost of gas for the entire trip. Next, we need to recognize any constraints or assumptions that may be relevant to the problem. For example, we may assume that the gas mileage remains constant throughout the trip or that there are no additional costs, such as tolls or parking fees. By breaking down the problem in this way, we can gain a better understanding of what we need to do to solve it. In this case, we need to use the information given to find out how much each person contributed to the total cost of the items bought.\nDevising A Plan Once we have a clear understanding of the problem, we can move on to the next step, which is devising a plan. Devising a plan involves thinking of strategies or approaches that could help solve the problem. This could include using mathematical formulas, drawing diagrams or graphs, or using logical reasoning to eliminate possibilities. It is important to consider multiple strategies and choose the one that seems most likely to work. Based on previous study case, we can consider the following strategies:\nUse A Formula\nWe can set up a proportion where the left side of the proportion represents the cost per unit of distance, which is the Total Cost divided by the Total Distance. The right side of the proportion represents the cost per unit of gas used, which is the Price per Gallon divided by the Gas Mileage. $$(Total\\ Cost / Total\\ Distance) = (Price\\ per\\ Gallon / Gas\\ Mileage)$$ Use A Graph\nWe can create a graph to represent the relationship between the distance traveled and the total cost of gas. We can plot the distance on the x-axis and the cost on the y-axis, and use the gas mileage and price per gallon to determine the slope of the line. By considering these strategies, we can choose the one that seems most likely to work and use it to solve the problem.\nCarrying Out The Plan The third step is to carry out the plan, which involves applying the chosen strategy to solve the problem. This could involve performing calculations, making observations, or testing hypotheses. It is important to be systematic and organized in this step, and to keep track of the steps taken to arrive at the solution. In above study case, suppose we have decided to use the formula to calculate the total cost of gas for the trip. We can carry out the plan by plugging in the given values and performing the calculations as follows: $$Total\\ Cost= \\frac{500}{25}3=60$$ Therefore, the total cost of gas for the entire trip is $60.00. By carrying out the plan, we have successfully used the chosen strategy to solve the problem and arrived at the correct answer. The next step is to evaluate the solution to ensure that it is reasonable and makes sense in the context of the problem.\nEvaluate The Solution The final step is to evaluate the solution, which involves checking that the solution is correct and makes sense in the context of the problem. It is important to check the solution for errors, and to make sure that it satisfies any constraints or assumptions that were identified in the first step. If the solution is not correct, we may need to revisit the earlier steps and try a different approach. For our study case, to evaluate the solution, we can consider whether the answer makes sense based on our understanding of the problem:\nWe know that the distance of the trip is 500 miles The gas mileage of the car is 25 miles per gallon Therefore, the car should use 500 / 25 = 20 gallons of gas for the entire trip Multiplying this by the price per gallon of $3.00, we get a total cost of $60.00 This matches the solution that we calculated, so our answer is reasonable and makes sense in the context of the problem. By evaluating the solution, we can confirm that our problem-solving process was successful and that we have arrived at the correct answer.\nConclusion In conclusion, problem solving using mathematical thinking is a powerful tool that can help us tackle complex problems in a systematic and logical way. By following the four steps outlined in Pólya\u0026rsquo;s book, we can approach any problem with confidence and find effective solutions. Whether we are solving a math problem or dealing with a difficult situation in our personal or professional lives, the principles of mathematical thinking can help us overcome any challenge.\n","permalink":"http://adrian-maulana.com/blogs/mathematical-thinking/","summary":"Problem solving is an essential skill that we need to master in various aspects of our lives. One approach to problem solving that has been proven to be effective is using mathematical thinking.","title":"Mathematical Thinking"},{"content":"Introduction In the world of data engineering, the importance of managing and organizing data cannot be overstated. This is where database management systems (DBMS) come in. DBMS is a software application that enables users to interact with databases in an organized and efficient manner. In this blog, we will cover all about DBMS in data engineering, including its definition, types, and benefits.\nDefinition of DBMS A database management system (DBMS) is a software tool that enables users to create, manipulate, and maintain a database. DBMS ensures that data is stored in an organized and efficient manner, allowing for easy retrieval and modification. It provides a set of tools and functions that allow users to interact with the database and perform operations such as adding, deleting, and modifying data.\nTypes of DBMS There are several types of DBMS, each with its own strengths and weaknesses. The most common types of DBMS include:\nRelational DBMS: This type of DBMS uses a tabular structure to store data in the form of rows and columns. The data is organized in a way that makes it easy to query and retrieve information. Examples of popular relational DBMS include: MySQL: An open-source DBMS that is widely used for web applications. It supports various programming languages and is known for its ease of use and speed. Oracle: A widely used commercial DBMS that offers advanced features such as partitioning, compression, and clustering. It is often used for enterprise-level applications. Microsoft SQL Server: A DBMS developed by Microsoft that is commonly used for Windows-based applications. It offers a range of features such as replication, integration with other Microsoft products, and support for business intelligence tools. NoSQL DBMS: This type of DBMS is designed to handle unstructured or semi-structured data. Unlike relational DBMS, NoSQL DBMS does not use a fixed schema, allowing for greater flexibility and scalability. xamples of popular NoSQL DBMS include: MongoDB: A popular open-source document-oriented DBMS that uses JSON-like documents for data storage. It offers features such as automatic sharding, high availability, and horizontal scaling. Cassandra: A distributed DBMS that is designed for high availability and scalability. It offers features such as automatic data partitioning, column-family data model, and support for data replication across multiple data centers. Apache HBase: A column-oriented DBMS that is built on top of the Hadoop Distributed File System (HDFS). It offers features such as automatic sharding, in-memory caching, and support for MapReduce jobs. Object-oriented DBMS: This type of DBMS stores data in the form of objects, rather than tables. This makes it easier to store and retrieve complex data structures. Examples of object-oriented DBMS include GemStone/S, Versant Object Database, and Objectivity/DB. Benefits of DBMS Using a DBMS offers several benefits for data engineering. These include:\nImproved data organization: DBMS enables users to organize data in a structured manner, making it easier to access and retrieve information. Reduced data redundancy: DBMS eliminates data duplication, reducing the storage space required to store data. Improved data security: DBMS provides a range of security features, including user authentication, access control, and encryption, ensuring that data is secure and protected from unauthorized access. Increased data integrity: DBMS ensures that data is accurate and consistent, preventing data inconsistencies and errors. Conclusion In summary, DBMS plays a critical role in data engineering. It provides a range of tools and functions that enable users to interact with databases in an organized and efficient manner. With the various types of DBMS available, users can choose the one that best suits their needs. By using a DBMS, users can improve data organization, reduce data redundancy, improve data security, and increase data integrity.\n","permalink":"http://adrian-maulana.com/blogs/all-dbms/","summary":"In the world of data engineering, the importance of managing and organizing data cannot be overstated. This is where database management systems (DBMS) come in.","title":"All About DBMS"},{"content":"Introduction SQL, or Structured Query Language, is a programming language used for managing and manipulating data in relational databases. SQL is an essential skill for anyone who wants to work with databases and is widely used across various industries. In this article, we will take a comprehensive look at SQL from the basics to advanced concepts.\nGetting Started with SQL Before diving into SQL, it\u0026rsquo;s essential to understand what a relational database is. A relational database is a collection of tables that are related to each other by one or more common fields. SQL is used to create, manage, and manipulate these tables.\nThe Basic SQL Commands The most basic SQL commands are CREATE, INSERT, SELECT, UPDATE, and DELETE. These commands allow you to create tables, insert data, retrieve data, update data, and delete data.\nCREATE Command: This command is used to create tables in the database. The syntax for creating a table is: CREATE TABLE table_name ( column1 datatype, column2 datatype, column3 datatype, ... ); INSERT Command: This command is used to insert data into a table. The syntax for inserting data is: INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); SELECT Command: This command is used to retrieve data from a table. The syntax for retrieving data is: SELECT column1, column2, column3, ... FROM table_name; UPDATE Command: This command is used to update existing data in a table. The syntax for updating data is: UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition; DELETE Command: This command is used to delete data from a table. The syntax for deleting data is: DELETE FROM table_name WHERE condition; Advanced SQL Concepts Once you have mastered the basics of SQL, you can move on to more advanced concepts. Here are a few advanced SQL concepts:\nJoins: Joins are used to combine data from two or more tables into a single result set. There are four types of joins: INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL OUTER JOIN. Subqueries: Subqueries are used to retrieve data from one or more tables, and the result of the subquery is used as input for the main query. Indexes: Indexes are used to speed up queries by creating a copy of the data in a smaller, more compact form. Indexes can be created on one or more columns of a table. Views: Views are virtual tables that are created based on a SQL query. Views can be used to simplify complex queries, restrict access to sensitive data, and improve performance. Stored Procedures: Stored procedures are precompiled SQL statements that are stored in the database. Stored procedures can be used to improve performance, enforce business rules, and improve security. Best Practices for Using SQL Use Parameterized Queries Use Indexes Avoid Using SELECT * Use Joins Effectively Normalize Tables Use Transactions Use Views Use Stored Procedures Use Constraints Conclusions SQL is a powerful and versatile language for managing data in relational databases. Whether you are a beginner or an experienced programmer, learning SQL can be a valuable skill that can open doors to many career opportunities. In this article, we have covered the basics of SQL, as well as some advanced concepts that will help you become a SQL expert. With practice and dedication, anyone can learn SQL from zero to hero.\n","permalink":"http://adrian-maulana.com/blogs/sql-zero-to-hero/","summary":"In this article, we will take a comprehensive look at SQL from the basics to advanced concepts.","title":"SQL From Zero to Hero"},{"content":" Project Based Intern by BTPN Syariah Data Engineer\nFeb 2023 - Mar 2023\nDSLS Bootcamp by Data Science Indonesia Data Consultant\nJan 2023 - Mar 2023\nData Fellowship Program by IYKRA Data Engineer\nNov 2022 - Mar 2023\nCertifications AWS re/Start Graduate Certificate Credentials\nIssued Dec 2022 ","permalink":"http://adrian-maulana.com/careers/","summary":" Project Based Intern by BTPN Syariah Data Engineer\nFeb 2023 - Mar 2023\nDSLS Bootcamp by Data Science Indonesia Data Consultant\nJan 2023 - Mar 2023\nData Fellowship Program by IYKRA Data Engineer\nNov 2022 - Mar 2023\nCertifications AWS re/Start Graduate Certificate Credentials\nIssued Dec 2022 ","title":"Careers"}]